// Code generated by MockGen. DO NOT EDIT.
// Source: ws_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/udborets/chat-app/server/internal/models"
)

// MockIWebsBLogic is a mock of IWebsBLogic interface.
type MockIWebsBLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIWebsBLogicMockRecorder
}

// MockIWebsBLogicMockRecorder is the mock recorder for MockIWebsBLogic.
type MockIWebsBLogicMockRecorder struct {
	mock *MockIWebsBLogic
}

// NewMockIWebsBLogic creates a new mock instance.
func NewMockIWebsBLogic(ctrl *gomock.Controller) *MockIWebsBLogic {
	mock := &MockIWebsBLogic{ctrl: ctrl}
	mock.recorder = &MockIWebsBLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWebsBLogic) EXPECT() *MockIWebsBLogicMockRecorder {
	return m.recorder
}

// CheckParams mocks base method.
func (m *MockIWebsBLogic) CheckParams(userId, chatId int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckParams", userId, chatId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckParams indicates an expected call of CheckParams.
func (mr *MockIWebsBLogicMockRecorder) CheckParams(userId, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckParams", reflect.TypeOf((*MockIWebsBLogic)(nil).CheckParams), userId, chatId)
}

// ConnectToChat mocks base method.
func (m *MockIWebsBLogic) ConnectToChat(mapOfRooms *models.RoomsMap, client *models.Client, chatId, userId int) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToChat", mapOfRooms, client, chatId, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConnectToChat indicates an expected call of ConnectToChat.
func (mr *MockIWebsBLogicMockRecorder) ConnectToChat(mapOfRooms, client, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToChat", reflect.TypeOf((*MockIWebsBLogic)(nil).ConnectToChat), mapOfRooms, client, chatId, userId)
}

// ConnectToChats mocks base method.
func (m *MockIWebsBLogic) ConnectToChats(mapOfRooms *models.RoomsMap, client *models.Client, userId int) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToChats", mapOfRooms, client, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConnectToChats indicates an expected call of ConnectToChats.
func (mr *MockIWebsBLogicMockRecorder) ConnectToChats(mapOfRooms, client, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToChats", reflect.TypeOf((*MockIWebsBLogic)(nil).ConnectToChats), mapOfRooms, client, userId)
}

// CreateRoom mocks base method.
func (m *MockIWebsBLogic) CreateRoom() (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRoom")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateRoom indicates an expected call of CreateRoom.
func (mr *MockIWebsBLogicMockRecorder) CreateRoom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRoom", reflect.TypeOf((*MockIWebsBLogic)(nil).CreateRoom))
}

// ReadMessages mocks base method.
func (m *MockIWebsBLogic) ReadMessages(mapOfRooms *models.RoomsMap, client *models.Client, chatId, userId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadMessages", mapOfRooms, client, chatId, userId)
}

// ReadMessages indicates an expected call of ReadMessages.
func (mr *MockIWebsBLogicMockRecorder) ReadMessages(mapOfRooms, client, chatId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMessages", reflect.TypeOf((*MockIWebsBLogic)(nil).ReadMessages), mapOfRooms, client, chatId, userId)
}

// WriteMessages mocks base method.
func (m *MockIWebsBLogic) WriteMessages(mapOfRooms *models.RoomsMap, client *models.Client, chatId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteMessages", mapOfRooms, client, chatId)
}

// WriteMessages indicates an expected call of WriteMessages.
func (mr *MockIWebsBLogicMockRecorder) WriteMessages(mapOfRooms, client, chatId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteMessages", reflect.TypeOf((*MockIWebsBLogic)(nil).WriteMessages), mapOfRooms, client, chatId)
}
