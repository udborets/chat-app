// Code generated by MockGen. DO NOT EDIT.
// Source: auth_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/udborets/chat-app/server/internal/models"
)

// MockIAuthBLogic is a mock of IAuthBLogic interface.
type MockIAuthBLogic struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthBLogicMockRecorder
}

// MockIAuthBLogicMockRecorder is the mock recorder for MockIAuthBLogic.
type MockIAuthBLogicMockRecorder struct {
	mock *MockIAuthBLogic
}

// NewMockIAuthBLogic creates a new mock instance.
func NewMockIAuthBLogic(ctrl *gomock.Controller) *MockIAuthBLogic {
	mock := &MockIAuthBLogic{ctrl: ctrl}
	mock.recorder = &MockIAuthBLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthBLogic) EXPECT() *MockIAuthBLogicMockRecorder {
	return m.recorder
}

// ParseJWTToken mocks base method.
func (m *MockIAuthBLogic) ParseJWTToken(stringToken string) (interface{}, int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWTToken", stringToken)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ParseJWTToken indicates an expected call of ParseJWTToken.
func (mr *MockIAuthBLogicMockRecorder) ParseJWTToken(stringToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWTToken", reflect.TypeOf((*MockIAuthBLogic)(nil).ParseJWTToken), stringToken)
}

// SignIn mocks base method.
func (m *MockIAuthBLogic) SignIn(inp models.UserSignInInput) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", inp)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthBLogicMockRecorder) SignIn(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthBLogic)(nil).SignIn), inp)
}

// SignUp mocks base method.
func (m *MockIAuthBLogic) SignUp(inp models.UserSignUpInput) (int, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", inp)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAuthBLogicMockRecorder) SignUp(inp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAuthBLogic)(nil).SignUp), inp)
}
